Uncertainty and Utilities

- How you should plan when the actions' outcome is not entirely under your control?
- Idea: uncertain outcomes controlled by chance, and not by an adversary!

- if you play against a perfect adversary (optimal) -> it is possible to predict its next move
- but if there is a chance/probability -> the prediction needs to depend on this


- Why wouldn't we know what the result of an action will be?
    - explicit randomness: rolling dice
    - unpredictable adversaries: the ghosts respond randomly or not optimal
    - actions can fail: when moving a robot, wheels might slip

- any action taken will have some uncertainty
    - values should now reflext average-case outcomes, not worst-case (optimal) (minimax) outcomes
    - replace all the min values by averages -> EXPECTED VALUES


Expectimax Search:
    - idea: compute the average score under optimal play
    - now matter how well is played, who knows what is gonna happen when the dice roll
    - compute whatever actions are gonna give the best outcome on average
    - calculate the nodes' expected utilities

Expectimax Implementation:

    def max-value(state):
        if terminal state: return state's utility 
        initialize v = -infinity
        for each sucessor of state:
            v = max(v, exp-value(sucessor))
        return v

    def exp-value(state):
        if terminal state: return state's utility
        initialize v = 0
        for each sucessor of state:
            p = probability(sucessor)


Expectimax Pruning?
    - hard to prune because all the values count


**For average-case expectimax reasoning, we need magnitudes to be meaningful**


Probabilities

key concepts:
    - random variable: event whose outcome is unknown
    - probability distribution: an assignments of weights to outcomes

Some basic laws of probability:
    - probabilities are always non-negative
    - probabilities over all possible outcomes sum to one

** Probabilities may change as we get more evidence **
** We'll talk about methods for reasoning and updating probabilitites **


Expected Value: and average of random variables, weighted by the probability distribution
Now we'll be able to calculate our expectations of the children values -> expectimax values


In expectimax search,
    - we have a probabilistic model: how the adversary (or environment) will behave in any state
    - model could be a simple uniform distribution (roll a die)
    - model could be sophisticated and require a great deal of computation
    - the model might say that adversarial actions are likely!


When we decide to use Minimax or Expectimax?
    - depends on the modelling assumptions: How we think the world works? -> What computation should we do?
    - key modelling choice is: Are the outcomes out of our control, adversarial or chance?

The Dangers of Optiimism and Pessimism

- Dangerous Optimism: Assuming chance when the world is adversarial
    - assuming things are only happening according to chance
    - but the adversaries are out to get you
    - you are gonna do dangerous things because this assumption

- Dangerous Pessimism: Assuming the worst case even when it's not likely